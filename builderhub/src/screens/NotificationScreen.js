import React, { useState, useEffect, useRef } from 'react';
import { View, Text, FlatList, TouchableOpacity, Image, ActivityIndicator } from 'react-native';
import { firestore } from '../../firebase/firebaseConfig';
import { collection, query, orderBy, onSnapshot, doc, updateDoc, getDoc } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';
import { MaterialIcons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import Toast from 'react-native-toast-message';
import styles from '../styles/NotificationScreenStyles';

function NotificationScreen() {
  const auth = getAuth();
  const user = auth.currentUser;
  const navigation = useNavigation();
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);
  const [userDetails, setUserDetails] = useState({});
  const flatListRef = useRef(null);

  useEffect(() => {
    if (!user) {
      console.log('No authenticated user');
      setLoading(false);
      Toast.show({ type: 'error', text1: 'Please log in to view notifications' });
      return;
    }

    console.log('Fetching notifications for user:', user.uid);
    const notificationsRef = collection(firestore, 'users', user.uid, 'notifications');
    const q = query(notificationsRef, orderBy('timestamp', 'desc'));

    const unsubscribe = onSnapshot(q, async (snapshot) => {
      try {
        if (snapshot.empty) {
          console.log('No notifications found');
        } else {
          console.log('Notifications fetched:', snapshot.size);
        }

        const notificationList = snapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));

        const actorIds = [...new Set(notificationList.map((n) => n.actorId))];
        const details = {};
        for (const actorId of actorIds) {
          try {
            const userRef = doc(firestore, 'users', actorId);
            const userSnap = await getDoc(userRef);
            if (userSnap.exists()) {
              details[actorId] = userSnap.data();
            } else {
              console.log('User not found:', actorId);
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
          }
        }

        setUserDetails(details);
        setNotifications(notificationList);
        setLoading(false);

        if (notificationList.length > 0) {
          flatListRef.current?.scrollToIndex({ index: 0, animated: true });
        }
      } catch (error) {
        console.error('Error fetching notifications:', error);
        Toast.show({ type: 'error', text1: 'Failed to load notifications' });
        setLoading(false);
      }
    }, (error) => {
      console.error('Snapshot error:', error);
      Toast.show({ type: 'error', text1: 'Notification listener failed' });
      setLoading(false);
    });

    return () => {
      console.log('Unsubscribing from notifications');
      unsubscribe();
    };
  }, [user]);

  const markAsRead = async (notificationId) => {
    try {
      const notificationRef = doc(firestore, 'users', user.uid, 'notifications', notificationId);
      await updateDoc(notificationRef, { read: true });
    } catch (error) {
      console.error('Error marking notification as read:', error);
      Toast.show({ type: 'error', text1: 'Failed to mark as read' });
    }
  };

  const getNotificationMessage = (notification) => {
    const actorName = userDetails[notification.actorId]?.name || 'Someone';
    switch (notification.type) {
      case 'like':
        return `${actorName} liked your project post`;
      case 'comment':
        return `${actorName} commented on your project: "${notification.message || ''}"`;
      case 'order_status':
        return notification.message || `${actorName} updated your order status`;
      case 'hire_request':
        return notification.message || `${actorName} sent you a hire request`;
      case 'hire_request_status':
        return notification.message || `${actorName} updated the status of your hire request`;
      case 'bill_completed':
        const total = notification.message?.total || 0;
        return `Order #${notification.orderId?.slice(0, 8)}: A bill of Rs.${total.toFixed(2)} has been generated by ${actorName}. Please bill the amount to our delivery person.`;
      default:
        return `${actorName} interacted with your content`;
    }
  };

  const formatTimestamp = (timestamp) => {
    if (!timestamp) return 'Just now';
    try {
      const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
      const now = new Date();
      const diff = now - date;
      if (diff < 60000) return 'Just now';
      if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;
      if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`;
      return date.toLocaleDateString();
    } catch (error) {
      return 'Just now';
    }
  };

  const renderNotification = ({ item }) => {
    const actor = userDetails[item.actorId] || {};
    return (
      <TouchableOpacity
        style={[
          styles.notificationItem,
          item.read ? styles.readNotification : styles.unreadNotification,
        ]}
        onPress={() => {
          if (!item.read) markAsRead(item.id);

          console.log('Notification clicked:', { type: item.type, postId: item.postId, orderId: item.orderId, requestId: item.requestId });

          try {
            if (['like', 'comment'].includes(item.type) && item.postId) {
              navigation.navigate('PostCards', { postId: item.postId });
            } else if (item.type === 'order_status' && item.orderId) {
              navigation.navigate('OrderDetailsScreen', { orderId: item.orderId });
            } else if (['hire_request', 'hire_request_status'].includes(item.type) && item.requestId) {
              navigation.navigate('HireRequestDetailsScreen', { requestId: item.requestId });
            } else if (item.type === 'bill_completed' && item.orderId) {
              navigation.navigate('OrderDetailsScreen', { orderId: item.orderId, showBill: true });
            } else {
              console.warn('No valid navigation target for notification:', item);
              Toast.show({
                type: 'info',
                text1: 'Cannot open notification',
                text2: item.postId ? 'Post not found.' : item.orderId ? 'Order not found.' : 'This notification is not linked to a post, order, or hire request.',
              });
            }
          } catch (error) {
            console.error('Navigation error:', error);
            Toast.show({
              type: 'error',
              text1: 'Navigation failed',
              text2: 'Unable to open the content. Please try again.',
            });
          }
        }}
      >
        {!item.read && (
          <View style={styles.newBadge}>
            <Text style={styles.newBadgeText}>New</Text>
          </View>
        )}
        <Image
          source={{ uri: actor.profileImage || 'https://via.placeholder.com/40' }}
          style={styles.avatar}
        />
        <View style={styles.notificationContent}>
          <Text style={styles.notificationText} numberOfLines={2}>
            {getNotificationMessage(item)}
          </Text>
          <Text style={styles.timestamp}>{formatTimestamp(item.timestamp)}</Text>
        </View>
        {item.type === 'like' && (
          <MaterialIcons
            name="favorite"
            size={20}
            color="#e41e3f"
            style={styles.icon}
          />
        )}
        {item.type === 'comment' && (
          <MaterialIcons
            name="comment"
            size={20}
            color="#1877f2"
            style={styles.icon}
          />
        )}
        {item.type === 'order_status' && (
          <MaterialIcons
            name="shopping-cart"
            size={20}
            color="#28a745"
            style={styles.icon}
          />
        )}
        {item.type === 'hire_request' && (
          <MaterialIcons
            name="work"
            size={20}
            color="#F4B018"
            style={styles.icon}
          />
        )}
        {item.type === 'hire_request_status' && (
          <MaterialIcons
            name="briefcase"
            size={20}
            color="#0288D1"
            style={styles.icon}
          />
        )}
        {item.type === 'bill_completed' && (
          <MaterialIcons
            name="receipt"
            size={20}
            color="#ff9800"
            style={styles.icon}
          />
        )}
      </TouchableOpacity>
    );
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#F4B018" />
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.headerSection}>
        <Text style={styles.headerTitle}>Notifications</Text>
      </View>
      <FlatList
        ref={flatListRef}
        data={notifications}
        keyExtractor={(item) => item.id}
        renderItem={renderNotification}
        ListEmptyComponent={
          <Text style={styles.emptyText}>No notifications yet</Text>
        }
        contentContainerStyle={styles.listContainer}
        onScrollToIndexFailed={(info) => {
          console.warn('Scroll to index failed:', info);
          setTimeout(() => {
            flatListRef.current?.scrollToIndex({ index: 0, animated: true });
          }, 100);
        }}
      />
      <Toast />
    </View>
  );
}

export default NotificationScreen;